/*
 * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
 * See LICENSE in the project root for license information.
 */

"use strict";

(function() {
  Office.onReady().then(function() {
    $(document).ready(function() {
      //check the version
      if (!Office.context.requirements.isSetSupported("ExcelApi", 1.7)) {
        console.log(
          "Sorry. The tutorial add-in uses Excel.js APIs that are not available in your version of Office."
        );
      }

      createTable();
      addItem(2);
      addItem(4);
      addItem(6);
      addItem(0);
      addItem(3);
      addItem(5);
      addItem(7);
      addItem(1);
      putRowNameToLeft();
    });

    function createTable() {
      Excel.run(function(context) {
        var sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.name = "Hell FC";
        var range = sheet.getRange("A1:I1");
        var headerRange = sheet.getRanges("A1:A2,E1:E2,I1:I2");
        var date = [];
        var brandName = [];

        $.ajaxSettings.async = false; //avoid data mess
        $.getJSON("outputStruct.json", function(data) {
          date.push(data.sdate);
          brandName = getRowName(data.expectedReturnSets[0].expectedReturns);
        });

        sheet.getRange("A1").values = [date];
        sheet.getRange("B1").values = [["Spot"]];
        sheet.getRange("F1").values = [["Slice 12"]];

        range.format.autofitColumns();
        range.format.autofitRows();

        range.format.borders.getItem("EdgeBottom").weight = "Medium";
        headerRange.format.borders.getItem("EdgeRight").weight = "Medium";

        range.format.fill.color = "#E6E6FA";
        range.format.font.bold = true;
        range.format.font.size = 14;
        range.format.horizontalAlignment = "Center";

        var hellFCTable = sheet.tables.add("A2", true);
        hellFCTable.name = "hellFC";
        hellFCTable.getHeaderRowRange().values = [["Local/USD"]];

        hellFCTable.rows.add(null, brandName);

        hellFCTable.getHeaderRowRange().format.font.color = "black";
        hellFCTable
          .getHeaderRowRange()
          .format.borders.getItem("EdgeBottom").weight = "Medium";

        hellFCTable.columns
          .getItem("Local/USD")
          .getDataBodyRange()
          .format.borders.getItem("EdgeRight").weight = "Medium";
        hellFCTable.getRange().format.fill.color = "white";

        hellFCTable.getHeaderRowRange().format.font.size = 11;
        hellFCTable.getHeaderRowRange().format.fill.color = "#E6E6FA";

        return context.sync();
      }).catch(function(error) {
        handleError(error);
      });
    }

    function createColDict(rowName, data, headerName) {
      var dict = {};
      $.each(data, function(key, value) {
        dict[value.assetTag] = value.expRet;
      });
      var colData = [];
      colData.push([headerName]);
      $.each(rowName, function(key, value) {
        var item = [];
        if (typeof dict[value] === undefined) {
          dict[value] = "_NaN_";
        }
        item.push(dict[value]);
        colData.push(item);
      });
      return colData;
    }

    function getRowName(data) {
      var rowName = [];
      $.each(data, function(index, value) {
        var item = [];
        item.push(value.assetTag);
        rowName.push(item);
      });
      return rowName;
    }

    //add item to the end of the table
    function addItem(noGraph) {
      Excel.run(function(context) {
        var sheet = context.workbook.worksheets.getActiveWorksheet();
        var curTable = sheet.tables.getItem("hellFC");
        var brandName = [];
        var col = [];
        var header = "";
        var border = "Thin";

        $.ajaxSettings.async = false; //avoid data mess
        $.getJSON("outputStruct.json", function(data) {
          brandName = getRowName(
            data.expectedReturnSets[noGraph].expectedReturns
          );
          var jsonHeader = data.expectedReturnSets[noGraph].returnTag;
          if (
            jsonHeader === "fc_hell_hedged" ||
            jsonHeader === "fc_hell_hedged_sliced"
          ) {
            header = "Hedged";
            border = "Medium";
          } else if (
            jsonHeader === "fc_hell_lcl" ||
            jsonHeader === "fc_hell_lcl_sliced"
          ) {
            header = "Local";
          } else if (
            jsonHeader === "fc_hell_usd" ||
            jsonHeader === "fc_hell_usd_sliced"
          ) {
            header = "Unhedge";
          } else if (
            jsonHeader === "fc_hell_usd_xgro" ||
            jsonHeader === "fc_hell_usd_xgro_sliced"
          ) {
            header = "Unhedged x Gro";
          }
          col = createColDict(
            brandName,
            data.expectedReturnSets[noGraph].expectedReturns,
            header
          );
        });

        curTable.columns.add(null, col);
        curTable.getRange().format.autofitColumns();
        curTable.getRange().format.autofitRows();

        curTable
          .getDataBodyRange()
          .format.borders.getItem("EdgeRight").weight = border;

        curTable.getRange().format.horizontalAlignment = "Center";

        return context.sync();
      }).catch(function(error) {
        handleError(error);
      });
    }

    function putRowNameToLeft() {
      Excel.run(function(context) {
        var sheet = context.workbook.worksheets.getActiveWorksheet();
        var range = sheet.getRange("A:A");
        range.format.horizontalAlignment = "Left";
        return context.sync();
      }).catch(errorHandlerFunction);
    }

    function getJsonAddToTable(data) {
      var record = [];
      $.each(data, function(index, value) {
        var item = [
          value.id,
          value.productName,
          value.requestType,
          value.requestor,
          value.responseStatus,
          value.server,
          value.requestedOn,
          value.startTime,
          value.elapsedTime,
          value.percentComplete,
          value.outputLocation
        ];
        record.push(item);
      });
      addItem(record);
    }

    /*  function createTable() {
      Excel.run(function(context) {
        var sheet = context.workbook.worksheets.getActiveWorksheet();
        sheet.name = "get status";
        var getStatusTable = sheet.tables.add("A2:K2", true /*hasHeaders);
        getStatusTable.name = "getStatus";

        getStatusTable.getHeaderRowRange().values = [
          [
            "ID",
            "Product_Name",
            "Type",
            "User",
            "Response_Status",
            "Server",
            "Request_Start",
            "Start_Time",
            "Elapsed_Time",
            "Percent_Complete",
            "Output_Location"
          ]
        ];

        //get data from local
        $.getJSON("test.json", function(data) {
          getJsonAddToTable(data);
        });

        return context.sync();
      }).catch(function(error) {
        handleError(error);
      });
    }*/

    // Handle errors
    function handleError(error) {
      // Always be sure to catch any accumulated errors that bubble up from the Excel.run execution
      console.log("Error: " + error);
      if (error instanceof OfficeExtension.Error) {
        console.log("Debug info: " + JSON.stringify(error.debugInfo));
      }
    }
  });
})();
