-render return should have only one root element.
When creating components, you have the choice between two different ways:
Functional components (also referred to as "presentational", "dumb" or "stateless" components - more about this later in the course) => const cmp = () => { return <div>some JSX</div> } (using ES6 arrow functions as shown here is recommended but optional)
class-based components (also referred to as "containers", "smart" or "stateful" components) => class Cmp extends Component { render () { return <div>some JSX</div> } } 

-props
作为参数，props.xx

-props.children
any content between </>

-state
Whilst props allow you to pass data down the component tree (and hence trigger an UI update), state is used to change the component, well, state from within. Changes to state also trigger an UI update.
class NewPost extends Component { // state can only be accessed in class-based components!
    state = {
        counter: 1
    };  
 
    render () { // Needs to be implemented in class-based components! Needs to return some JSX!
        return (
            <div>{this.state.counter}</div>
        );
    }
}
change state: this.setState
hook: useState
const [state, setState]=useState({
   xxx;
});
setState: change the property

-container: stateless/dumb/presentational components vs smart/stateful components
-onClick里面可以直接加arrow function传参数(ineffective) or .bind(this,parameter)
-props可以直接传function reference
-inline css:
const style={};
style={style}
-{}可插入javascript
-use map to render list of html items
-update state immutable with ...
-react list need a key
