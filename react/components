<Component/
  property
>
component.jsx:
props.xxx

stateful/container component:
useState to manage the state

class component: 
class xx extends yy
has component lifecycle
1. constructor:
set initial stateï¼Œ this.state=xx;
cannot setState.
no: send http request, store in your local storage(may cause re-render)
2. static getDerivedStateFromProps(props, state)
3. render(no timer and http request)
4. componentDidMount(make http request, no update state)
5. 
functional component(lifecycle hooks, no):
const XY=props=>{};

component lifecycle update
1. getDerivedStateFromProps(props, state)
2. shouldComponentUpdate(nextProps, nextState) (decide continue or not)
3. render()
4. update child component props
5. getSnapshotBeforeUpdate(prevProps, preState): last min DOM ops, scroll the user back
6. componentDidUpdate(), http request, do not update the state
