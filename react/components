<Component/
  property
>
component.jsx:
props.xxx

stateful/container component:
useState to manage the state

class component(props is accessible by this.props): 
class xx extends yy
has component lifecycle
1. constructor:
set initial stateï¼Œ this.state=xx;
cannot setState.
no: send http request, store in your local storage(may cause re-render)
2. static getDerivedStateFromProps(props, state)
3. render(no timer and http request)
4. componentDidMount(make http request, no update state)
5. 
functional component(lifecycle hooks, no):
const XY=props=>{};

component lifecycle update
1. getDerivedStateFromProps(props, state)
2. shouldComponentUpdate(nextProps, nextState) (decide continue or not), return true/false
check if nextProps & this.props the same, diff return true;
compare the pointer in memory
3. render()
4. update child component props
5. getSnapshotBeforeUpdate(prevProps, preState): last min DOM ops, scroll the user back, return null if possible
6. componentDidUpdate(prevProps, preState, snapshot), http request, do not update the state, may cause the re-render cycle

Improve performance:
componentDidUpdate
componentDidMount
export xx React.memo(xx); compare stored component in memory 

functional components' hook
-useEffect, run every render cycle, http request can put in here
useEffect(()=>{
  do sth;
  return xx;
},[sth]);
when sth changed, it will execute.
sth is empty, it will run at the beginning, never re-run.
return will run when run the last time.(clean up work)
no sth, every time 

change value, create a new object and ref
pureComponent instead of component
