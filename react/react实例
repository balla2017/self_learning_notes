http://www.ruanyifeng.com/blog/2015/03/react.html
https://github.com/ruanyf/react-demos#demo12-display-value-from-a-promise
JavaScript 引擎（包括浏览器和 Node）都不认识 JSX，需要首先使用 Babel 转码，然后才能运行
React 需要加载两个库：React 和 React-DOM，前者是 React 的核心库，后者是 React 的 DOM 适配库。
Babel 用来在浏览器转换 JSX 语法，如果服务器已经转好了，浏览器就不需要加载这个库。
核心思想： View 是 State 的输出。
架构：大型应用程序应该如何组织代码
通信：组件之间如何通信
React 同步状态的基本方法：找到通信双方最近的共同父组件，通过它的state，使得子组件的状态保持同步。

凡是使用到jsx的地方要加上， type="text/babel"
ReactDOM.render()
用于将js转换成html部分，并插入到指定的DOM

this.props: 一旦定义就不再改变（用户与组件的互动不属于）
this.props.children(获取当前组件子节点)
-无：undefined
-一个：object
-1+: array
getDefaultProps:用来设置默认值

组件的属性可以接受任意值，字符串、对象、函数等等都可以。有时，我们需要一种机制，验证别人使用组件时，提供的参数是否符合要求。
组件类的PropTypes属性，就是用来验证组件实例的属性是否符合要求
var MyTitle = React.createClass({
  propTypes: {
    title: React.PropTypes.string.isRequired,
  },

  render: function() {
     return <h1> {this.props.title} </h1>;
   }
});
var data = 123;

ReactDOM.render(
  <MyTitle title={data} />,
  document.body
);

获取真实的DOM节点：
this.ref.[refName]

this.state：随着用户的行为而改变
getInitialState:获取初始状态
状态变化，this.setState修改状态值，修改后自动调用render()自动渲染组件

this.props 表示那些一旦定义，就不再改变的特性，而 this.state 是会随着用户互动而产生变化的特性。

文本输入框的值，不能用 this.props.value 读取，而要定义一个 onChange 事件的回调函数，通过 event.target.value 读取用户输入的值。textarea 元素、select元素、radio元素都属于这种情况，更多介绍请参

组件生命周期：
mounting: 已插入真实DOM
updating：正在被重新渲染
unmounting: 已移出真实DOM
will在函数进入状态前调用， did在函数进入状态后

改变透明度：
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <script src="../build/react.development.js"></script>
    <script src="../build/react-dom.development.js"></script>
    <script src="../build/babel.min.js"></script>
  </head>
  <body>
    <div id="example"></div>
    <script type="text/babel">
      class Hello extends React.Component {
        constructor(props) {
          super(props)
          this.state = {
            opacity: 1.0
          };
        }
        componentDidMount() {
          this.timer = setInterval(function () {
            var opacity = this.state.opacity;
            opacity -= .05;
            if (opacity < 0.1) {
              opacity = 1.0;
            }
            this.setState({
              opacity: opacity
            });
          }.bind(this), 100);
        }
        render() {
          return (
            <div style={{opacity: this.state.opacity}}>
              Hello {this.props.name}
            </div>
          );
        }
      }
        
      ReactDOM.render(
        <Hello name="world"/>,
        document.getElementById('example')
      );
    </script>
  </body>
</html>

Ajax:
AJAX应用可以仅向伺服器发送并取回必須的数据，并在客户端采用JavaScript处理来自伺服器的回應。因为在伺服器和浏览器之间交换的数据大量减少，伺服器回應更快了。同时，很多的处理工作可以在发出请求的客户端机器上完成，因此Web伺服器的负荷也减少了。
组件的数据来源，通常是通过 Ajax 请求从服务器获取

Flux架构：
最大特点：数据单向流动。与 MVVM 的数据双向绑定，形成鲜明对比。
action->dispatcher->store->view
核心思想：
不同组件的state，存放在一个外部的、公共的 Store 上面。
组件订阅 Store 的不同部分。
组件发送（dispatch）动作（action），引发 Store 的更新。

Redux 架构
核心思想：
-有的状态存放在Store。组件每次重新渲染，都必须由状态变化引起。
-用户在 UI 上发出action。
-reducer函数接收action，然后根据当前的state，计算出新的state。
dispatch({action},{current state})->reducer->new state(store)
-Redux 将组件分成 UI 组件和容器组件两类。
-UI 组件是纯组件，不包含 state 和生命周期方法，不涉及组件的行为，只涉及组件的外观。
容器组件：
-不涉及组件的外观，只涉及组件的行为。
-负责订阅 Store，将 Store 的数据处理以后，再通过参数传给 UI 组件。
-用户给出配置以后，由 Redux 生成。

cons：
-UI 组件与后台数据无关，可以由设计师负责
-容器组件只负责数据和行为，一旦 Store 的数据结构变化，只要调整容器组件即可
-表现层和功能层脱钩，有利于代码重用，也有利于看清应用的数据结构和业务逻辑

reducer是一个纯函数，用来接收action，算出新的state。
-Store由 Redux 提供的createStore方法生成，该方法接受reducer作为参数。
-为了把Store传入组件，必须使用 Redux 提供的Provider组件在应用的最外面，包裹一层。
